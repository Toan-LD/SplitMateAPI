// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SplitMateAPI.Data;

#nullable disable

namespace SplitMateAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SplitMateAPI.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Expenses_pkey");

                    b.HasIndex(new[] { "GroupId" }, "IX_Expenses_GroupId");

                    b.HasIndex(new[] { "PayerId" }, "IX_Expenses_PayerId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.ExpenseShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ShareAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("ExpenseShares_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExpenseId" }, "IX_ExpenseShares_ExpenseId");

                    b.ToTable("ExpenseShares");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Groups_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("GroupMembers_pkey");

                    b.HasIndex(new[] { "GroupId" }, "IX_GroupMembers_GroupId");

                    b.HasIndex(new[] { "UserId" }, "IX_GroupMembers_UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Messages_pkey");

                    b.HasIndex("SenderId");

                    b.HasIndex(new[] { "GroupId" }, "IX_Messages_GroupId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.HasIndex(new[] { "Email" }, "Users_Email_key")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("UserTokens_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Expense", b =>
                {
                    b.HasOne("SplitMateAPI.Entities.Group", "Group")
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Expense_Group");

                    b.HasOne("SplitMateAPI.Entities.User", "Payer")
                        .WithMany("Expenses")
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Expense_Payer");

                    b.Navigation("Group");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.ExpenseShare", b =>
                {
                    b.HasOne("SplitMateAPI.Entities.Expense", "Expense")
                        .WithMany("ExpenseShares")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ExpenseShare_Expense");

                    b.HasOne("SplitMateAPI.Entities.User", "User")
                        .WithMany("ExpenseShares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ExpenseShare_User");

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Group", b =>
                {
                    b.HasOne("SplitMateAPI.Entities.User", "Owner")
                        .WithMany("Groups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Group_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.GroupMember", b =>
                {
                    b.HasOne("SplitMateAPI.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupMember_Group");

                    b.HasOne("SplitMateAPI.Entities.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupMember_User");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Message", b =>
                {
                    b.HasOne("SplitMateAPI.Entities.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Message_Group");

                    b.HasOne("SplitMateAPI.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Message_Sender");

                    b.Navigation("Group");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.UserToken", b =>
                {
                    b.HasOne("SplitMateAPI.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Expense", b =>
                {
                    b.Navigation("ExpenseShares");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.Group", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("GroupMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SplitMateAPI.Entities.User", b =>
                {
                    b.Navigation("ExpenseShares");

                    b.Navigation("Expenses");

                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("Messages");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
